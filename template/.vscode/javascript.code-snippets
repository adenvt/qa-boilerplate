{
  // Place your template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Scaffold new test spec": {
    "prefix": "sc",
    "body": [
      "const expect  = require('chai').expect",
      "const request = require('supertest')",
      "const config  = require('./utils/config')",
      "const storage = require('./utils/storage')",
      "const error   = require('./utils/error')",
      "",
      "const agent = request(config.baseURL)",
      "",
      "describe('${1:Service Name} - ${2:Scenario Name}', () => {",
      "  ${0}",
      "})"
    ],
    "description": "Create new test"
  },
  "New test case": {
    "prefix": "it",
    "body": [
      "it('${1:description}', () => {",
      "  return agent",
      "    .${2|get,post,put,delete|}('/${3:url}')",
      "    .set('Accept', 'application/json')",
      "    ${4:.set('Authorization', `Bearer ${storage.get('token')\\}`)}",
      "    .expect('Content-Type', /json/)",
      "    .expect(200)",
      "    .on('error', error)",
      "    .then((res) => {",
      "      expect(res.body).have.all.keys('code', 'message', 'data')",
      "      ${0}",
      "    })",
      "})",
    ],
    "description": "Add new test case"
  },
}
